# Initial version generated by chatGPT on 20/05/2023
from jsonschema import validate
from jsonschema.exceptions import ValidationError
from selenium.webdriver.common.by import By


def validate_yaml_schema(config):
    # Get valid Selenium locator strategies as string values
    valid_locator_strategies = [attr for attr in dir(By) if attr.isupper()]

    # Define the YAML schema
    schema = {
        "type": "object",
        "properties": {
            "url": {"type": "string"},
            "webdriver_options": {
                "type": "object",
                "additionalProperties": True
            },
            "steps": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "element_locator": {"type": "string", "enum": valid_locator_strategies},
                        "element_locator_value": {"type": "string"},
                        "interaction": {"type": "string", "enum": ["click", "write_text"]},
                        "interaction_value": {"type": "string"}
                    },
                    "required": ["element_locator", "element_locator_value", "interaction"],
                    "additionalProperties": False
                }
            },
            "final_element": {
                "type": "object",
                "properties": {
                    "element_locator": {"type": "string", "enum": valid_locator_strategies},
                    "element_locator_value": {"type": "string"}
                },
                "required": ["element_locator", "element_locator_value"],
                "additionalProperties": False
            }
        },
        "required": ["url", "steps", "final_element"],
        "additionalProperties": False
    }

    # Validate the YAML config against the schema
    try:
        validate(instance=config, schema=schema)
        return True
    except Exception:
        return False


def validate_new_yaml_schema(config):
    schema = {
        "type": "object",
        "properties": {
            "url": {"type": "string"},
            "webdriver_options": {
                "type": "object",
                "additionalProperties": True
            },
            "steps": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": ["identify", "enter-text", "click", "docpic"]
                        },
                        "var": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        "using": {
                            "type": "string",
                            "enum": ["id", "class", "tag", "name", "link", "partial-link", "css", "xpath"]
                        },
                        "selector": {
                            "type": "string"
                        },
                        "in": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "enum": ["var-ref", "target"]
                                },
                                "var-name": {
                                    "type": "string"
                                }
                            },
                            "required": ["type"],
                            "additionalProperties": True # Account for "target" being a new item - not pretty, dislike.
                            # # I think the below works - it should enforce the rule that "target" and "selector"
                            # # should never be used in the same step at the same level.
                            # # To test.
                            # "dependencies": {
                            #     "selector": {
                            #         "not": ["target"]
                            #     },
                            #     "target": {
                            #         "not": ["selector"]
                            #     }
                            # }
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "required": ["type"],
                    "additionalProperties": True
                }
            }
        },
        "required": ["steps"],
        "additionalProperties": False
    }

    # Validate the YAML config against the schema
    try:
        validate(instance=config, schema=schema)
        return True
    except ValidationError as e:
        print("Invalid Yaml: " + str(e))
        return False
